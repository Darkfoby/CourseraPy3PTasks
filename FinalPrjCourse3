#Define a function, called get_movies_from_tastedive. 
#It should take one input parameter, a string that is the name of a movie or music artist. 
#The function should return the 5 TasteDive results that are associated with that string; be sure to only get movies, not other kinds of media. 
#It will be a python dictionary with just one key, ‘Similar’.

#Try invoking your function with the input “Black Panther”.

#HINT: Be sure to include only q, type, and limit as parameters in order to extract data from the cache. 
If any other parameters are included, then the function will not be able to recognize the data that you’re attempting to pull from the cache.

import requests_with_caching
import json

import requests_with_caching
import json

def get_movies_from_tastedive(quer):
    baseurl = "https://tastedive.com/api/similar"
    params_dict = {}
    params_dict["q"] = quer
    params_dict["type"] = "movies"
    params_dict["limit"] = 5
    tastedive_resp = requests_with_caching.get(baseurl, params = params_dict, permanent_cache_file="permanent_cache.txt")
    #print (tastedive_resp.url)
    return tastedive_resp.json()

def extract_movie_titles(fdic):
    titles = []
    for film in fdic["Similar"]["Results"]:
        titles.append(film["Name"])
    return titles


def get_related_titles(namelst):
    new_lst = []
    for i in namelst:
        simfilms = get_movies_from_tastedive(i)
        titles = extract_movie_titles(simfilms)
        for b in titles:
            if b in new_lst:
                print ("Already in the list")
            else:
                new_lst.append(b)
    return new_lst
    
    
def get_movie_data(title):
    baseurl = "http://www.omdbapi.com/"
    params_dict = {}
    params_dict["t"] = title
    params_dict["r"] = "json"
    resp_omdb = requests_with_caching.get(baseurl, params = params_dict, permanent_cache_file = "permanent_cache.txt")
    #print (resp_omdb.url)
    return resp_omdb.json()
    
    
def get_movie_rating(frate):
    interim = frate["Ratings"]
    for i in interim:
        if i["Source"] == "Rotten Tomatoes":
            rating = (int((i["Value"]).strip("%")))
            print (rating)
            break
        else:
            rating = 0
    return rating


def get_sorted_recommendations(titlelst):
    r_list = []
    endlist = []
    for i in titlelst:
        simlst = get_related_titles(titlelst) #creates list ot titles
        for b in simlst:
            interlst = get_movie_data(b) #extracting data
            ratinglst = get_movie_rating(interlst) #extracting rating
            r_list.append(ratinglst)
    #print (simlst, r_list)
    mrating = list(zip(simlst, r_list))
    rating = sorted(mrating, key = lambda x: (x[1], x), reverse = True)
    print (rating)
    for i in rating:
        endlist.append(i[0])

    return endlist
    
    
