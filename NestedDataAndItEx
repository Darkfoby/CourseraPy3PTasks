# 8.Iterate through the list so that if the character ‘m’ is in the string, then it should be added to a new list called m_list.
#Hint: Because this isn’t just a list of lists, think about what type of object you want your data to be stored in. Conditionals may help you.

d = ['good morning', 'hello', 'chair', 'python', ['music', 'flowers', 'facebook', 'instagram', 'snapchat', ['On my Own', 'monster', 'Words dont come so easily', 'lead me right']], 'Stressed Out', 'Pauver Coeur', 'Reach for Tomorrow', 'mariners song', 'Wonder sleeps here']

m_list = []

for i in d:
    if 'm' in i:
        m_list.append(i)
    else:
        if type(i) == list:
            for b in i:
                if 'm' in b:
                    m_list.append(b)
                else:
                    if type(b) == list:
                        for v in b:
                            if 'm' in v:
                                m_list.append(v)
                
print (m_list)

# 9.The nested dictionary, pokemon, shows the number of various Pokemon that each person has caught while playing Pokemon Go. 
#Find the total number of rattatas, dittos, and pidgeys caught and assign to the variables r, d, and p respectively.
#Do not hardcode. Note: Be aware that not every trainer has caught a ditto.

pokemon = {'Trainer1':
          {'normal': {'rattatas':15, 'eevees': 2, 'ditto':1}, 'water': {'magikarps':3}, 'flying': {'zubats':8, 'pidgey': 12}},
          'Trainer2':
          {'normal': {'rattatas':25, 'eevees': 1}, 'water': {'magikarps':7}, 'flying': {'zubats':3, 'pidgey': 15}},
          'Trainer3':
          {'normal': {'rattatas':10, 'eevees': 3, 'ditto':2}, 'water': {'magikarps':2}, 'flying': {'zubats':3, 'pidgey': 20}},
          'Trainer4':
          {'normal': {'rattatas':17, 'eevees': 1}, 'water': {'magikarps':9}, 'flying': {'zubats':12, 'pidgey': 14}}}

r = 0
d = 0
p = 0

for i in pokemon:
    n = pokemon[i]
    #print (n)
    for rat in n['normal']:
        if 'rattatas' in rat:
            r += n['normal']['rattatas']
    for dit in n['normal']:
        if 'ditto' in dit:
            d += n['normal']['ditto']
    for pid in n['flying']:
        if 'pidgey' in pid:
            p += n['flying']['pidgey']
            
print (d, r, p)            

# 10.Below, we have provided a nested list called big_list. 
#Use nested iteration to create a dictionary, word_counts, that contains all the words in big_list as keys, and the number of times they occur as values.

big_list = [[['one', 'two'], ['seven', 'eight']], [['nine', 'four'], ['three', 'one']], [['two', 'eight'], ['seven', 'four']], [['five', 'one'], ['four', 'two']], [['six', 'eight'], ['two', 'seven']], [['three', 'five'], ['one', 'six']], [['nine', 'eight'], ['five', 'four']], [['six', 'three'], ['four', 'seven']]]

word_counts = {}

for i in big_list:
    for b in i:
        for c in b:
            if c not in word_counts:
                word_counts[c] = 0
            word_counts[c] += 1
 
 # 11.Provided is a dictionary that contains pokemon go player data, where each player reveals the amount of candy each of their pokemon have. 
 #If you pooled all the data together, which pokemon has the highest number of candy? 
 #Assign that pokemon to the variable most_common_pokemon.
 
pokemon_go_data = {'bentspoon':
                  {'Rattata': 203, 'Pidgey': 120, 'Drowzee': 89, 'Squirtle': 35, 'Pikachu': 3, 'Eevee': 34, 'Magikarp': 300, 'Paras': 38},
                  'Laurne':
                  {'Pidgey': 169, 'Rattata': 245, 'Squirtle': 9, 'Caterpie': 38, 'Weedle': 97, 'Pikachu': 6, 'Nidoran': 44, 'Clefairy': 15, 'Zubat': 79, 'Dratini': 4},
                  'picklejarlid':
                  {'Rattata': 32, 'Drowzee': 15, 'Nidoran': 4, 'Bulbasaur': 3, 'Pidgey': 56, 'Weedle': 21, 'Oddish': 18, 'Magmar': 6, 'Spearow': 14},
                  'professoroak':
                  {'Charmander': 11, 'Ponyta': 9, 'Rattata': 107, 'Belsprout': 29, 'Seel': 19, 'Pidgey': 93, 'Shellder': 43, 'Drowzee': 245, 'Tauros': 18, 'Lapras': 18}}

candy = {}
most_common_pokemon = 0
for i in pokemon_go_data:
    for b in pokemon_go_data[i]:
        if b not in candy:
            candy[b] = 0
        candy[b] += pokemon_go_data[i][b]
        
for i in candy:
    if candy[i] > most_common_pokemon:
        most_common_pokemon = i
        print (most_common_pokemon)
